AWSTemplateFormatVersion: 2010-09-09
Description: EC2 instance
Parameters: 
  AlarmEmail: 
    Default: "sakura_strife@sina.com"
    Description: "Email address to notify if operational problems arise"
    Type: "String"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC with Subnets covering 2 Availability zone at least.
    MinLength: 1
  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: A public subnet to launch chef-client
Resources: 
    EC2Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - 
          PolicyName: "ReadKey"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "s3:*"
                Resource: "*"
  MyEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - 
          !Ref "EC2Role"

  MyEC2InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MyEC2Instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: Name
          Value: MyEC2InstanceSG
      VpcId: !Ref VpcId   

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-b70554c8
      InstanceType: t2.micro
      KeyName: fin
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: 
        - !Ref MyEC2InstanceSG
      IamInstanceProfile: !Ref MyEC2InstanceProfile
      UserData: 
        Fn::Base64:
          Fn::Join: [
            "",
            [
              "#!/bin/bash -xe","\n",
              "touch hellofin.txt"
            ]
          ]

  MyQueue: 
    Type: AWS::SQS::Queue
  AlarmTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - 
          Endpoint: 
            Ref: "AlarmEmail"
          Protocol: "email"

  QueueDepthAlarm: 
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: "Alarm if queue depth grows beyond 10 messages"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions: 
        - 
          Name: "QueueName"
          Value: 
            Fn::GetAtt: 
              - "MyQueue"
              - "QueueName"
      Statistic: "Sum"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "10"
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions: 
        - 
          Ref: "AlarmTopic"
      InsufficientDataActions: 
        - 
          Ref: "AlarmTopic"
Outputs: 
  QueueURL: 
    Description: "URL of newly created SQS Queue"
    Value: 
      Ref: "MyQueue"
  QueueARN: 
    Description: "ARN of newly created SQS Queue"
    Value: 
      Fn::GetAtt: 
        - "MyQueue"
        - "Arn"
  QueueName: 
    Description: "Name newly created SQS Queue"
    Value: 
      Fn::GetAtt: 
        - "MyQueue"
        - "QueueName"